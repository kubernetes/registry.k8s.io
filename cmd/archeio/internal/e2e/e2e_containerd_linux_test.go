//go:build linux && !noe2e

/*
Copyright 2023 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package e2e

import (
	"os"
	"os/exec"
	"path/filepath"
	"testing"
	"time"
)

func TestE2EContainerdPull(t *testing.T) {
	t.Parallel()
	containerdVersions := []string{"1.6.20", "1.7.0", "2.1.3"}
	for i := range containerdVersions {
		containerdVersion := containerdVersions[i]
		t.Run("v"+containerdVersion, func(t *testing.T) {
			testE2EContainerdPull(t, containerdVersion)
		})
	}
}

func testE2EContainerdPull(t *testing.T, containerdVersion string) {
	t.Parallel()
	// install containerd and image puller tool
	installDir := filepath.Join(binDir, "containerd-"+containerdVersion)
	// nolint:gosec
	installCmd := exec.Command(filepath.Join(repoRoot, "hack", "tools", "e2e-setup-containerd.sh"))
	installCmd.Env = append(installCmd.Env,
		"CONTAINERD_VERSION="+containerdVersion,
		"CONTAINERD_INSTALL_DIR="+installDir,
	)
	installCmd.Stderr = os.Stderr
	if err := installCmd.Run(); err != nil {
		t.Fatalf("Failed to install containerd: %v", err)
	}

	// start rootless containerd, which only needs to be able to pull images
	tmpDir, err := os.MkdirTemp("", "containerd")
	if err != nil {
		t.Fatalf("Failed to setup tmpdir: %v", err)
	}
	t.Cleanup(func() {
		os.RemoveAll(tmpDir)
	})
	socketAddress := filepath.Join(tmpDir, "containerd.sock")
	// nolint:gosec
	containerdCmd := exec.Command(
		filepath.Join(installDir, "containerd"),
		// config generated by e2e-setup-containerd.sh
		"--config="+filepath.Join(installDir, "containerd-config.toml"),
		"--root="+filepath.Join(tmpDir, "root"),
		"--state="+filepath.Join(tmpDir, "state"),
		"--address="+socketAddress,
		"--log-level=trace",
	)
	containerdCmd.Stderr = os.Stderr
	if err := containerdCmd.Start(); err != nil {
		t.Fatalf("Failed to start containerd: %v", err)
	}
	t.Cleanup(func() {
		if err := containerdCmd.Process.Signal(os.Interrupt); err != nil {
			t.Fatalf("failed to signal containerd: %v", err)
		}
		// kill if it doesn't exit gracefully after 1s
		done := make(chan error)
		go func() { done <- containerdCmd.Wait() }()
		select {
		case <-done:
			// exited
		case <-time.After(time.Second):
			// timed out
			if err := containerdCmd.Process.Kill(); err != nil {
				t.Fatalf("Failed to kill containerd: %v", err)
			}
		}
	})

	// wait for containerd to be ready
	containerdReady := false
	for i := 0; i < 5; i++ {
		// nolint:gosec
		if err := exec.Command(filepath.Join(installDir, "ctr"), "--address="+socketAddress, "version").Run(); err == nil {
			containerdReady = true
			break
		}
		time.Sleep(time.Duration(i) * time.Second)
	}
	if !containerdReady {
		t.Fatalf("Failed to wait for containerd to be ready")
	}

	// pull test images
	for i := range testCases {
		tc := &testCases[i]
		t.Run(tc.Name, func(t *testing.T) {
			t.Parallel()
			// nolint:gosec
			pullCmd := exec.Command(filepath.Join(installDir, "ctr"), "--address="+socketAddress, "content", "fetch", tc.Ref())
			testPull(t, tc, pullCmd)
		})
	}
}
